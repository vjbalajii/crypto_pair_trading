// Mocks generated by Mockito 5.1.0 from annotations
// in crypto_pair_trading/test/model/repository/trading_repository_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;

import 'package:crypto_pair_trading/model/order_book.dart' as _i3;
import 'package:crypto_pair_trading/model/tick.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

import 'trading_repository_test.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeTick_0 extends _i1.Fake implements _i2.Tick {}

class _FakeOrderBook_1 extends _i1.Fake implements _i3.OrderBook {}

/// A class which mocks [TradingRepositoryTest].
///
/// See the documentation for Mockito's code generation for more information.
class MockTradingRepositoryTest extends _i1.Mock
    implements _i4.TradingRepositoryTest {
  MockTradingRepositoryTest() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.Tick> fetchTickData(String? value) =>
      (super.noSuchMethod(Invocation.method(#fetchTickData, [value]),
              returnValue: Future<_i2.Tick>.value(_FakeTick_0()))
          as _i5.Future<_i2.Tick>);
  @override
  _i5.Future<_i3.OrderBook> fetchOrderBookData(String? value) =>
      (super.noSuchMethod(Invocation.method(#fetchOrderBookData, [value]),
              returnValue: Future<_i3.OrderBook>.value(_FakeOrderBook_1()))
          as _i5.Future<_i3.OrderBook>);
}
